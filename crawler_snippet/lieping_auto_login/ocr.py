# -*- coding: utf-8 -*-

import time
import requests
from StringIO import StringIO
from PIL import Image

TIME = int(time.time()*1000)
s = requests.Session()
TH_MIN = 165
TH_MAX = 255

import math
def cosine_similarity(v1,v2):
    sumxx, sumxy, sumyy = 0, 0, 0
    for i in range(max(len(v1), len(v2))):
        if len(v1)<=i:
            x = 0
        else:
            x = int(v1[i])
        if len(v2)<=i:
            y = 1
        else:
            y = int(v2[i])
        sumxx += x*x
        sumyy += y*y
        sumxy += x*y
    return sumxy/math.sqrt(sumxx*sumyy)

def get_random_img(url=None):
  if url:
      verify_image_url = url
  else:
      verify_image_url = 'http://www.liepin.com/image/randomcode4Login'
  content = s.get(verify_image_url).content
  global vimg
  vimg = Image.open(StringIO(content))
  return vimg

def read_image():
  img = Image.open('vcode.jpg')
  return img

def isHit(whiteblack):
    if whiteblack <= TH_MAX and whiteblack >= TH_MIN:
        return True

    return False

def isHitRGB(rgb):
    return isHit(sum(rgb)/3)

def next_fg_bound(img, begin):
  data = img.getdata()
  for i in xrange(begin, img.size[0]):
    for j in xrange(img.size[1]):
      if isHitRGB(data[j*img.size[0]+i]):
        return i

def next_bg_bound(img, begin):
  data = img.getdata()
  for i in xrange(begin, img.size[0]):
    flag = 1
    for j in xrange(img.size[1]):
      if isHitRGB(data[j*img.size[0]+i]):
        flag = 0
        break
    if flag: return i

def print_img(img):
  data = img.getdata()
  for i in xrange(img.size[1]):
    for j in xrange(img.size[0]):
      if isHitRGB(data[i*img.size[0]+j]):
        print  '*',
      else:
        print '-',
    print
  print

def get_img_num(img):
  begin, end = 0, 0
  ret = ''
  i = 0
  while i < 4:
    try:
        begin = next_fg_bound(img, end)
        end = next_bg_bound(img, begin)
        j = get_num(img, begin, end)
    except TypeError:
        return "sorry, I can not verify this code:("
    if j == -1:
        continue
    print begin, end
    #ret = ret * 10 + j
    ret += str(j)
    i += 1
  #print ret
  return ret

def get_num(img, begin, end):
  num_list = [
      [
'  ****  ',
' ****** ',
' *    * ',
'**    **',
'**    **',
'**    **',
'**    **',
'**    **',
'**    **',
'**    **',
' **  ** ',
'  ****  ',
    ]
     ,
     [
'  **   ',
'****   ',
'  **   ',
'  **   ',
'  **   ',
'  **   ',
'  **   ',
'  **   ',
'  **   ',
'  **   ',
'  ***  ',
'*******',
]
     ,
     [
'   ***  ',
' *** ***',
'      **',
'      **',
'      **',
'     ** ',
'    **  ',
'   **   ',
' **     ',
' *      ',
'******* ',
'******* ',
]
     ,
    [
'  ***** ',
'  ******',
'      **',
'      **',
'     ***',
'  ****  ',
'  ***** ',
'     ***',
'     ***',
'     ***',
'*   *** ',
'******  ',
    ]
     ,
     [
'    **  ',
'    **  ',
'   * *  ',
'  *  *  ',
' **  *  ',
' *   *  ',
'**   ** ',
'********',
'     *  ',
'     *  ',
'     *  ',
]
     ,
     [
'  ** * ',
'*******',
'**     ',
'**     ',
'**     ',
'*****  ',
'   *** ',
'    ***',
'     **',
'     **',
'    ** ',
'*****  ',
]
     ,
     [
'    **** *',
'  ****** *',
'  **      ',
' **       ',
' **       ',
'********  ',
'***   **  ',
'**    **  ',
'**    **  ',
'**    **  ',
'**   **   ',
' *****    ',
]
     ,
     [
'********',
'      * ',
'     ** ',
'     *  ',
'    **  ',
'   **   ',
'   *    ',
'  **    ',
' **     ',
' **     ',
' **     ',
]
     ,
     [
'   ***    ',
' *******  ',
' **   **  ',
' **   **  ',
' *** **   ',
'  *****   ',
'  *****   ',
' **  ***  ',
'**    ** *',
'**     *  ',
' **   **  ',
'  *****   ',
]
     ,
     [
'    **  ',
'  **  **',
' **    *',
' *     *',
' *     *',
' *    **',
' **  ***',
'  *** **',
'      * ',
'     ** ',
'    **  ',
'*****   ',
        ],
]

  num_vector = [
#0
[
    '000011000001110110011000011011000011010000011011000111011001111001100110000000110000001100000011000111110000',
    '000110000001101100011000110110000110110000110110000011110000011110000110110000110011000110011001100001111000',
    '000011110000011111100011100111001100001101110001110111000111011000011101100001101110000110011000111001111111000011111000',
    '000111000001111110011000110011000011110000011110000011110000111110000110110000110110001100110001100011110000',
    '000110000110011001000010010000111100001111000011110000011100001111000011010000110110011000111100',
    '000001100111110010111000011000001100000110000011000011100001100000110000011001111111',
    '000011000011001000100001010000010100000111000001100000011000001110000010100000100100010001111000',
    ],
#1
[
    '000110001111000001100000110000011000001100000110000011000001100000110000111001111111',
    '011111000110000110000110000110000110000110001100001100001100111111',
    '000010111100011000110001100010000100001000110001100010011111',
    '000110001111100001111000000110000001100000111000001110000011100000111000001110000111111011111111',
    '00111110000110000011000001100000110000011000001100001100000110000011001111111',
    '000010011110000010000110000100000100000100000100000100001100001100111111',
    '1110000100001000010000100001000010000100001000010011111',
    '001000111000001000001000001000001000001000001000001000001000001000111111',
    '111111111111110000011000001000001100000100000100000110000010000011000001100001100000',
    '001001110000100001000010000100001000010000100001000010011111',
    ],
#2
[
    '001111000111111000000111000000110000011100000110000011000001100000110000011000001111110111111111',
    '000111000000001000000011000000110000001000000100000010000001000000100000010000001100000011111100',
    '000111000010001000000011000000110000001000000110000011000011000000100000010000001100000011111100',
    '000011100000100111000000011000000011000000010000000110000001000000010000001100000011000000011000000111111100',
    '011111001101110000011000000100000110000010000011000011000011000011000011101001111111',
    '011100100011000011000001000011000010000100001000010000110000100000111111',
    '011100100010000001000001000001000010000110001100010000110000100000111111',
    '001111000011111100011001110111000111110000111110000111110000111110000111111000111111000110011011110001111100',
    ],
#3
[
    '001111000010001100000011000000100000011000111000000011000000011000000010000001100000110011111000',
    '111110010111100000110000011000001100111100001111000001100000011000011000001101111100',
    '011110011011100000111000011000001100111100011111000001100000011000001100001111111110',
    '000110000000010000001000000100000100011100000011000000110000011000001100001101111100',
    '000111000000110000001000000100000100011100000011000000110000001000001100001101111100',
    '011100100011000001000001000010001100000110000011000001000001000011111110',
    '111110000011111110000000111000000011100000001100000111100000011111000000001110000000011000000011100010011110001111110100',
    '011111000111111000000111000001110000011000111100001111100000011100000111000000110100111111111110',
    ],
#4
[
    '000000010000000111000001110000011110000110110001100110011000110111111111111111111000001100000001100000001100',
    '0000011100001111000110100011001000100110010001101111111111111111000001000000010000000100',
    '00000110000111000110100110110010011010001011011111111111000011000001100000110',
    '000000100000110000111000110100010010010011010001011000101111111000001000001100000100',
    ],
#5
[
    '010100011111111100000110000011000001111100000111000000110000011000001100001101111100',
    '001111111001111111001100000001100000011000000011111100000011110000001110000001110000001110100011100111111000',
    '000010000011111100100000001000000010000001111000000001000000011000000110000001000000110011111000',
    '0011111100100000001000000010000000111100000011100000011000000110000001100000111011111000',
    '11111111100000110000011000000111100000111000000110000011000001100001101111100',
    '010000111111100000100000100000111100000010000011000001000001000011111110',
    '111111110000100000110000111100000010000011000001000001000011111110',
    '000010000111100010000001000000100000011100000001000000110000011000001000001101111100',
    ],
#6
[
    '000111110011111110011000000111000000111011000111111110111000110110000111110000111111000111011001110001111100',
    '000111000110001001000000010000001100000011111110110000101100001111000011010000110110001000111100',
    '000011111001111111011100000011000000111000000110111110111000110110000110110000110110000110111001100011111000',
    '001111100111101001100000110000001100100011111110110000111100001111000011110000110110011000111100',
    '000001110001111011001100000011000000011000000111111100111000110110000110110000110110000110110001100011111000',
    '000011100001000100100000010000000100000011011110110000101000001110000010100000101100010001111000',
    ],
#7
[
    '000101000111111100000011000000100000010000001100000110000011000001100000011000001100000011000000',
    '011111111011111111000000111000001110000001100000011000000110000001100000011100001111000000111000000111000000',
    '111111101111111110000111000001100000110000001100000110000011100000110000011100000110000011100000',
    '011111110011111111000011111000001110000001100000011000000110000001100000001100000011000000110000000110000000',
    '111100011111110000011000001000001000000100000100000110000010000011000001000001100000',
    '0111111100000011000000100000010000001100000110000011000000100000011000001100000011000000',
    '111110111111110000011000001000001100001100000100000110000010000011000001100000100000',
    ],
#8
[
    '000011100011001100100001001000010011001000011100001011100100011010000010100000101100011001111000',
    '000111000010011001000011010000110010001000111100001011100100011111000001010000110110001100111110',
    '000011100001111111001000011011000010001100110001111000001111100010001110110000110110000110111001100011111000',
    '000111000011001001000011011000110110001000111100001011100100011111000011010000110110001100111110',
    '000111000010011001000011011000100011001000111100001011100100011101000011110000010110001100111110',
    '000110001000101000010100001001000100111100010111010000101000011100000110000100111110',
    ],
#9
[
    '000011000011001101000001010000010100000101000001011000110011001100000010000001100000110011110000',
    '000011000011001101100001010000010100000101000011011001110011101100000010000001100000110011111000',
    '000011000011001101100001010000010100000101000011011001110011101100000010000001100000110011111000',
    '000110000011101100010000110110000110110000111011000111011101111001110111000000110000000110000001100011111000',
    '000110000110011001000010110000111100000101000011011001110011100100000011000000100000011001111100',
    '001100011001101000010100001110000111000011100011101110110000010000001000001101111000',
    '000011000001111110011000011011000011111000011011000111011101110001110110000000110000001100000011000111110000',
    ],
          ]

  data = img.getdata()
  top, bot = 0, img.size[1]
  for i in xrange(img.size[1]):
    if top:
      break
    for j in xrange(begin, end):
      if isHitRGB(data[i*img.size[0]+j]):
        top = i
        break

  for i in xrange(top, img.size[1]):
    flag = 1
    for j in xrange(begin, end):
      if isHitRGB(data[i*img.size[0]+j]):
        flag = 0
        break
    if flag:
      bot = i
      break

  if end-begin+bot-top < 13:
      return -1

  ret = [0] * 10

  vector_a = []
  for x in xrange(top, bot):
    for y in xrange(begin, end):
      if isHitRGB(data[x*img.size[0]+y]):
        #print '*',
        vector_a.append('1')
        pass
      else:
        #print ' ',
        vector_a.append('0')
        pass
    #print

  print ''.join(vector_a)
  expect = [0]*10
  for i in xrange(10):
      expect[i] = max(   [cosine_similarity(vector_b, vector_a) for vector_b in num_vector[i]]   )

  print expect
  return expect.index(max(expect))
  return -1

if __name__ == '__main__':
  img = get_random_img()
  #img = read_image()
  print_img(img)
  print '{0}' .format( get_img_num(img) )
