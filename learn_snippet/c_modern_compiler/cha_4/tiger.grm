%{
#include <stdio.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
	/* et cetera */
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%type <exp> exp program
/* et cetera */

%start program

%%

program:   exp    {absyn_root=$1;}

 /* exp:   ID         {$$=A_VarExp(EM_tokPos,A_SimpleVar(EM_tokPos,S_Symbol($1)));} */






exp: lvalue
   | funcall
   | LPAREN exp RPAREN
   | assign
   | ifthen
   | ifthenelse
   | while
   | NIL
   | LPAREN expseq RPAREN
   | LPAREN stm RPAREN
   | LPAREN RPAREN
   | INT
   | STRING
   | MINUS exp
   | opexp
   | cpexp
   | cpstr
   | boolexp
   | record
   | for
   | let
   | BREAK
   | createarray

decs: /* empty */
    | dec decs

dec : tydec
    | vardec
    | fundec

tydec: TYPE ID EQ ty
ty: ID
  | LBRACE tyfields RBRACE
  | ARRAY OF ID

tyfields:  /* empty */
        | ID COLON ID
        | COMMA tyfields

vardec: VAR ID ASSIGN exp
      | VAR ID COLON ID COLON ASSIGN exp

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

lvalue: ID
      | lvalue DOT ID
      | arrayind

arrayind: lvalue LBRACK exp RBRACK

stm: exp SEMICOLON exp
   | stm SEMICOLON exp

expseq: /* empty */
      | exp
      | exp COMMA expseq

explist: exp
       | exp COMMA explist

funcall: ID LPAREN RPAREN
       | ID LPAREN explist RPAREN

ifthen: IF exp THEN exp

ifthenelse: IF exp THEN exp ELSE exp

assign: lvalue ASSIGN exp

while: WHILE exp DO exp

for: FOR ID ASSIGN exp TO exp DO exp

let: LET decs IN expseq END

opexp: exp PLUS exp
     | exp MINUS exp
     | exp TIMES exp
     | exp DIVIDE exp

cpexp: exp EQ exp
     | exp NEQ exp
     | exp GT exp
     | exp LT exp
     | exp GE exp
     | exp LE exp

cpstr: STRING EQ STRING 
     | STRING NEQ STRING 
     | STRING GT STRING 
     | STRING LT STRING 
     | STRING GE STRING 
     | STRING LE STRING 

boolexp: exp OR exp
       | exp AND exp

assignseq: assign
         | assign COMMA assignseq

record: ID LBRACE assignseq RBRACE 

createarray: arrayind OF exp
