State 2 conflicts: 6 shift/reduce
State 4 conflicts: 1 shift/reduce
State 38 conflicts: 1 shift/reduce
State 41 conflicts: 12 shift/reduce
State 98 conflicts: 12 shift/reduce
State 99 conflicts: 12 shift/reduce
State 100 conflicts: 12 shift/reduce
State 101 conflicts: 12 shift/reduce
State 102 conflicts: 12 shift/reduce
State 103 conflicts: 12 shift/reduce
State 104 conflicts: 12 shift/reduce
State 105 conflicts: 12 shift/reduce
State 106 conflicts: 12 shift/reduce
State 107 conflicts: 12 shift/reduce
State 108 conflicts: 12 shift/reduce
State 109 conflicts: 12 shift/reduce
State 112 conflicts: 12 shift/reduce
State 113 conflicts: 12 shift/reduce
State 122 conflicts: 13 shift/reduce
State 123 conflicts: 12 shift/reduce
State 145 conflicts: 12 shift/reduce
State 160 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: lvalue
    3    | funcall
    4    | LPAREN exp RPAREN
    5    | assign
    6    | ifthen
    7    | ifthenelse
    8    | while
    9    | NIL
   10    | LPAREN expseq RPAREN
   11    | LPAREN stm RPAREN
   12    | LPAREN RPAREN
   13    | INT
   14    | STRING
   15    | MINUS exp
   16    | opexp
   17    | cpexp
   18    | cpstr
   19    | boolexp
   20    | record
   21    | for
   22    | let
   23    | BREAK
   24    | createarray

   25 decs: %empty
   26     | dec decs

   27 dec: tydec
   28    | vardec
   29    | fundec

   30 tydec: TYPE ID EQ ty

   31 ty: ID
   32   | LBRACE tyfields RBRACE
   33   | ARRAY OF ID

   34 tyfields: %empty
   35         | ID COLON ID
   36         | COMMA tyfields

   37 vardec: VAR ID ASSIGN exp
   38       | VAR ID COLON ID COLON ASSIGN exp

   39 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   40       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

   41 lvalue: ID
   42       | lvalue DOT ID
   43       | arrayind

   44 arrayind: lvalue LBRACK exp RBRACK

   45 stm: exp SEMICOLON exp
   46    | stm SEMICOLON exp

   47 expseq: %empty
   48       | exp
   49       | exp COMMA expseq

   50 explist: exp
   51        | exp COMMA explist

   52 funcall: ID LPAREN RPAREN
   53        | ID LPAREN explist RPAREN

   54 ifthen: IF exp THEN exp

   55 ifthenelse: IF exp THEN exp ELSE exp

   56 assign: lvalue ASSIGN exp

   57 while: WHILE exp DO exp

   58 for: FOR ID ASSIGN exp TO exp DO exp

   59 let: LET decs IN expseq END

   60 opexp: exp PLUS exp
   61      | exp MINUS exp
   62      | exp TIMES exp
   63      | exp DIVIDE exp

   64 cpexp: exp EQ exp
   65      | exp NEQ exp
   66      | exp GT exp
   67      | exp LT exp
   68      | exp GE exp
   69      | exp LE exp

   70 cpstr: STRING EQ STRING
   71      | STRING NEQ STRING
   72      | STRING GT STRING
   73      | STRING LT STRING
   74      | STRING GE STRING
   75      | STRING LE STRING

   76 boolexp: exp OR exp
   77        | exp AND exp

   78 assignseq: assign
   79          | assign COMMA assignseq

   80 record: ID LBRACE assignseq RBRACE

   81 createarray: arrayind OF exp


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 30 31 33 35 37 38 39 40 41 42 52 53 58 80
STRING (259) 14 70 71 72 73 74 75
INT (260) 13
COMMA (261) 36 49 51 79
COLON (262) 35 38 40
SEMICOLON (263) 45 46
LPAREN (264) 4 10 11 12 39 40 52 53
RPAREN (265) 4 10 11 12 39 40 52 53
LBRACK (266) 44
RBRACK (267) 44
LBRACE (268) 32 80
RBRACE (269) 32 80
DOT (270) 42
PLUS (271) 60
MINUS (272) 15 61
TIMES (273) 62
DIVIDE (274) 63
EQ (275) 30 39 40 64 70
NEQ (276) 65 71
LT (277) 67 73
LE (278) 69 75
GT (279) 66 72
GE (280) 68 74
AND (281) 77
OR (282) 76
ASSIGN (283) 37 38 56 58
ARRAY (284) 33
IF (285) 54 55
THEN (286) 54 55
ELSE (287) 55
WHILE (288) 57
FOR (289) 58
TO (290) 58
DO (291) 57 58
LET (292) 59
IN (293) 59
END (294) 59
OF (295) 33 81
BREAK (296) 23
NIL (297) 9
FUNCTION (298) 39 40
VAR (299) 37 38
TYPE (300) 30


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
exp (48)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24, on right: 1 4 15 37 38 39 40 44 45 46 48 49 50 51 54 55
    56 57 58 60 61 62 63 64 65 66 67 68 69 76 77 81
decs (49)
    on left: 25 26, on right: 26 59
dec (50)
    on left: 27 28 29, on right: 26
tydec (51)
    on left: 30, on right: 27
ty (52)
    on left: 31 32 33, on right: 30
tyfields (53)
    on left: 34 35 36, on right: 32 36 39 40
vardec (54)
    on left: 37 38, on right: 28
fundec (55)
    on left: 39 40, on right: 29
lvalue (56)
    on left: 41 42 43, on right: 2 42 44 56
arrayind (57)
    on left: 44, on right: 43 81
stm (58)
    on left: 45 46, on right: 11 46
expseq (59)
    on left: 47 48 49, on right: 10 49 59
explist (60)
    on left: 50 51, on right: 51 53
funcall (61)
    on left: 52 53, on right: 3
ifthen (62)
    on left: 54, on right: 6
ifthenelse (63)
    on left: 55, on right: 7
assign (64)
    on left: 56, on right: 5 78 79
while (65)
    on left: 57, on right: 8
for (66)
    on left: 58, on right: 21
let (67)
    on left: 59, on right: 22
opexp (68)
    on left: 60 61 62 63, on right: 16
cpexp (69)
    on left: 64 65 66 67 68 69, on right: 17
cpstr (70)
    on left: 70 71 72 73 74 75, on right: 18
boolexp (71)
    on left: 76 77, on right: 19
assignseq (72)
    on left: 78 79, on right: 79 80
record (73)
    on left: 80, on right: 20
createarray (74)
    on left: 81, on right: 24


State 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    program      go to state 12
    exp          go to state 13
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 1

   41 lvalue: ID .
   52 funcall: ID . LPAREN RPAREN
   53        | ID . LPAREN explist RPAREN
   80 record: ID . LBRACE assignseq RBRACE

    LPAREN  shift, and go to state 29
    LBRACE  shift, and go to state 30

    $default  reduce using rule 41 (lvalue)


State 2

   14 exp: STRING .
   70 cpstr: STRING . EQ STRING
   71      | STRING . NEQ STRING
   72      | STRING . GT STRING
   73      | STRING . LT STRING
   74      | STRING . GE STRING
   75      | STRING . LE STRING

    EQ   shift, and go to state 31
    NEQ  shift, and go to state 32
    LT   shift, and go to state 33
    LE   shift, and go to state 34
    GT   shift, and go to state 35
    GE   shift, and go to state 36

    EQ        [reduce using rule 14 (exp)]
    NEQ       [reduce using rule 14 (exp)]
    LT        [reduce using rule 14 (exp)]
    LE        [reduce using rule 14 (exp)]
    GT        [reduce using rule 14 (exp)]
    GE        [reduce using rule 14 (exp)]
    $default  reduce using rule 14 (exp)


State 3

   13 exp: INT .

    $default  reduce using rule 13 (exp)


State 4

    4 exp: LPAREN . exp RPAREN
   10    | LPAREN . expseq RPAREN
   11    | LPAREN . stm RPAREN
   12    | LPAREN . RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 37
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    RPAREN  [reduce using rule 47 (expseq)]

    exp          go to state 38
    lvalue       go to state 14
    arrayind     go to state 15
    stm          go to state 39
    expseq       go to state 40
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 5

   15 exp: MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 41
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 6

   54 ifthen: IF . exp THEN exp
   55 ifthenelse: IF . exp THEN exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 42
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 7

   57 while: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 43
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 8

   58 for: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 44


State 9

   59 let: LET . decs IN expseq END

    FUNCTION  shift, and go to state 45
    VAR       shift, and go to state 46
    TYPE      shift, and go to state 47

    $default  reduce using rule 25 (decs)

    decs    go to state 48
    dec     go to state 49
    tydec   go to state 50
    vardec  go to state 51
    fundec  go to state 52


State 10

   23 exp: BREAK .

    $default  reduce using rule 23 (exp)


State 11

    9 exp: NIL .

    $default  reduce using rule 9 (exp)


State 12

    0 $accept: program . $end

    $end  shift, and go to state 53


State 13

    1 program: exp .
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    $default  reduce using rule 1 (program)


State 14

    2 exp: lvalue .
   42 lvalue: lvalue . DOT ID
   44 arrayind: lvalue . LBRACK exp RBRACK
   56 assign: lvalue . ASSIGN exp

    LBRACK  shift, and go to state 66
    DOT     shift, and go to state 67
    ASSIGN  shift, and go to state 68

    $default  reduce using rule 2 (exp)


State 15

   43 lvalue: arrayind .
   81 createarray: arrayind . OF exp

    OF  shift, and go to state 69

    $default  reduce using rule 43 (lvalue)


State 16

    3 exp: funcall .

    $default  reduce using rule 3 (exp)


State 17

    6 exp: ifthen .

    $default  reduce using rule 6 (exp)


State 18

    7 exp: ifthenelse .

    $default  reduce using rule 7 (exp)


State 19

    5 exp: assign .

    $default  reduce using rule 5 (exp)


State 20

    8 exp: while .

    $default  reduce using rule 8 (exp)


State 21

   21 exp: for .

    $default  reduce using rule 21 (exp)


State 22

   22 exp: let .

    $default  reduce using rule 22 (exp)


State 23

   16 exp: opexp .

    $default  reduce using rule 16 (exp)


State 24

   17 exp: cpexp .

    $default  reduce using rule 17 (exp)


State 25

   18 exp: cpstr .

    $default  reduce using rule 18 (exp)


State 26

   19 exp: boolexp .

    $default  reduce using rule 19 (exp)


State 27

   20 exp: record .

    $default  reduce using rule 20 (exp)


State 28

   24 exp: createarray .

    $default  reduce using rule 24 (exp)


State 29

   52 funcall: ID LPAREN . RPAREN
   53        | ID LPAREN . explist RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 70
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 71
    lvalue       go to state 14
    arrayind     go to state 15
    explist      go to state 72
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 30

   80 record: ID LBRACE . assignseq RBRACE

    ID  shift, and go to state 73

    lvalue     go to state 74
    arrayind   go to state 75
    assign     go to state 76
    assignseq  go to state 77


State 31

   70 cpstr: STRING EQ . STRING

    STRING  shift, and go to state 78


State 32

   71 cpstr: STRING NEQ . STRING

    STRING  shift, and go to state 79


State 33

   73 cpstr: STRING LT . STRING

    STRING  shift, and go to state 80


State 34

   75 cpstr: STRING LE . STRING

    STRING  shift, and go to state 81


State 35

   72 cpstr: STRING GT . STRING

    STRING  shift, and go to state 82


State 36

   74 cpstr: STRING GE . STRING

    STRING  shift, and go to state 83


State 37

   12 exp: LPAREN RPAREN .

    $default  reduce using rule 12 (exp)


State 38

    4 exp: LPAREN exp . RPAREN
   45 stm: exp . SEMICOLON exp
   48 expseq: exp .
   49       | exp . COMMA expseq
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    COMMA      shift, and go to state 84
    SEMICOLON  shift, and go to state 85
    RPAREN     shift, and go to state 86
    PLUS       shift, and go to state 54
    MINUS      shift, and go to state 55
    TIMES      shift, and go to state 56
    DIVIDE     shift, and go to state 57
    EQ         shift, and go to state 58
    NEQ        shift, and go to state 59
    LT         shift, and go to state 60
    LE         shift, and go to state 61
    GT         shift, and go to state 62
    GE         shift, and go to state 63
    AND        shift, and go to state 64
    OR         shift, and go to state 65

    RPAREN  [reduce using rule 48 (expseq)]


State 39

   11 exp: LPAREN stm . RPAREN
   46 stm: stm . SEMICOLON exp

    SEMICOLON  shift, and go to state 87
    RPAREN     shift, and go to state 88


State 40

   10 exp: LPAREN expseq . RPAREN

    RPAREN  shift, and go to state 89


State 41

   15 exp: MINUS exp .
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 15 (exp)]
    MINUS     [reduce using rule 15 (exp)]
    TIMES     [reduce using rule 15 (exp)]
    DIVIDE    [reduce using rule 15 (exp)]
    EQ        [reduce using rule 15 (exp)]
    NEQ       [reduce using rule 15 (exp)]
    LT        [reduce using rule 15 (exp)]
    LE        [reduce using rule 15 (exp)]
    GT        [reduce using rule 15 (exp)]
    GE        [reduce using rule 15 (exp)]
    AND       [reduce using rule 15 (exp)]
    OR        [reduce using rule 15 (exp)]
    $default  reduce using rule 15 (exp)


State 42

   54 ifthen: IF exp . THEN exp
   55 ifthenelse: IF exp . THEN exp ELSE exp
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65
    THEN    shift, and go to state 90


State 43

   57 while: WHILE exp . DO exp
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65
    DO      shift, and go to state 91


State 44

   58 for: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 92


State 45

   39 fundec: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   40       | FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 93


State 46

   37 vardec: VAR . ID ASSIGN exp
   38       | VAR . ID COLON ID COLON ASSIGN exp

    ID  shift, and go to state 94


State 47

   30 tydec: TYPE . ID EQ ty

    ID  shift, and go to state 95


State 48

   59 let: LET decs . IN expseq END

    IN  shift, and go to state 96


State 49

   26 decs: dec . decs

    FUNCTION  shift, and go to state 45
    VAR       shift, and go to state 46
    TYPE      shift, and go to state 47

    $default  reduce using rule 25 (decs)

    decs    go to state 97
    dec     go to state 49
    tydec   go to state 50
    vardec  go to state 51
    fundec  go to state 52


State 50

   27 dec: tydec .

    $default  reduce using rule 27 (dec)


State 51

   28 dec: vardec .

    $default  reduce using rule 28 (dec)


State 52

   29 dec: fundec .

    $default  reduce using rule 29 (dec)


State 53

    0 $accept: program $end .

    $default  accept


State 54

   60 opexp: exp PLUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 98
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 55

   61 opexp: exp MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 99
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 56

   62 opexp: exp TIMES . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 100
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 57

   63 opexp: exp DIVIDE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 101
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 58

   64 cpexp: exp EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 102
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 59

   65 cpexp: exp NEQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 103
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 60

   67 cpexp: exp LT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 104
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 61

   69 cpexp: exp LE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 105
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 62

   66 cpexp: exp GT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 106
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 63

   68 cpexp: exp GE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 107
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 64

   77 boolexp: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 108
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 65

   76 boolexp: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 109
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 66

   44 arrayind: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 110
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 67

   42 lvalue: lvalue DOT . ID

    ID  shift, and go to state 111


State 68

   56 assign: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 112
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 69

   81 createarray: arrayind OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 113
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 70

   52 funcall: ID LPAREN RPAREN .

    $default  reduce using rule 52 (funcall)


State 71

   50 explist: exp .
   51        | exp . COMMA explist
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    COMMA   shift, and go to state 114
    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    $default  reduce using rule 50 (explist)


State 72

   53 funcall: ID LPAREN explist . RPAREN

    RPAREN  shift, and go to state 115


State 73

   41 lvalue: ID .

    $default  reduce using rule 41 (lvalue)


State 74

   42 lvalue: lvalue . DOT ID
   44 arrayind: lvalue . LBRACK exp RBRACK
   56 assign: lvalue . ASSIGN exp

    LBRACK  shift, and go to state 66
    DOT     shift, and go to state 67
    ASSIGN  shift, and go to state 68


State 75

   43 lvalue: arrayind .

    $default  reduce using rule 43 (lvalue)


State 76

   78 assignseq: assign .
   79          | assign . COMMA assignseq

    COMMA  shift, and go to state 116

    $default  reduce using rule 78 (assignseq)


State 77

   80 record: ID LBRACE assignseq . RBRACE

    RBRACE  shift, and go to state 117


State 78

   70 cpstr: STRING EQ STRING .

    $default  reduce using rule 70 (cpstr)


State 79

   71 cpstr: STRING NEQ STRING .

    $default  reduce using rule 71 (cpstr)


State 80

   73 cpstr: STRING LT STRING .

    $default  reduce using rule 73 (cpstr)


State 81

   75 cpstr: STRING LE STRING .

    $default  reduce using rule 75 (cpstr)


State 82

   72 cpstr: STRING GT STRING .

    $default  reduce using rule 72 (cpstr)


State 83

   74 cpstr: STRING GE STRING .

    $default  reduce using rule 74 (cpstr)


State 84

   49 expseq: exp COMMA . expseq

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 47 (expseq)

    exp          go to state 118
    lvalue       go to state 14
    arrayind     go to state 15
    expseq       go to state 119
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 85

   45 stm: exp SEMICOLON . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 120
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 86

    4 exp: LPAREN exp RPAREN .

    $default  reduce using rule 4 (exp)


State 87

   46 stm: stm SEMICOLON . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 121
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 88

   11 exp: LPAREN stm RPAREN .

    $default  reduce using rule 11 (exp)


State 89

   10 exp: LPAREN expseq RPAREN .

    $default  reduce using rule 10 (exp)


State 90

   54 ifthen: IF exp THEN . exp
   55 ifthenelse: IF exp THEN . exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 122
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 91

   57 while: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 123
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 92

   58 for: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 124
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 93

   39 fundec: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   40       | FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 125


State 94

   37 vardec: VAR ID . ASSIGN exp
   38       | VAR ID . COLON ID COLON ASSIGN exp

    COLON   shift, and go to state 126
    ASSIGN  shift, and go to state 127


State 95

   30 tydec: TYPE ID . EQ ty

    EQ  shift, and go to state 128


State 96

   59 let: LET decs IN . expseq END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    $default  reduce using rule 47 (expseq)

    exp          go to state 118
    lvalue       go to state 14
    arrayind     go to state 15
    expseq       go to state 129
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 97

   26 decs: dec decs .

    $default  reduce using rule 26 (decs)


State 98

   60 opexp: exp . PLUS exp
   60      | exp PLUS exp .
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 60 (opexp)]
    MINUS     [reduce using rule 60 (opexp)]
    TIMES     [reduce using rule 60 (opexp)]
    DIVIDE    [reduce using rule 60 (opexp)]
    EQ        [reduce using rule 60 (opexp)]
    NEQ       [reduce using rule 60 (opexp)]
    LT        [reduce using rule 60 (opexp)]
    LE        [reduce using rule 60 (opexp)]
    GT        [reduce using rule 60 (opexp)]
    GE        [reduce using rule 60 (opexp)]
    AND       [reduce using rule 60 (opexp)]
    OR        [reduce using rule 60 (opexp)]
    $default  reduce using rule 60 (opexp)


State 99

   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   61      | exp MINUS exp .
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 61 (opexp)]
    MINUS     [reduce using rule 61 (opexp)]
    TIMES     [reduce using rule 61 (opexp)]
    DIVIDE    [reduce using rule 61 (opexp)]
    EQ        [reduce using rule 61 (opexp)]
    NEQ       [reduce using rule 61 (opexp)]
    LT        [reduce using rule 61 (opexp)]
    LE        [reduce using rule 61 (opexp)]
    GT        [reduce using rule 61 (opexp)]
    GE        [reduce using rule 61 (opexp)]
    AND       [reduce using rule 61 (opexp)]
    OR        [reduce using rule 61 (opexp)]
    $default  reduce using rule 61 (opexp)


State 100

   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   62      | exp TIMES exp .
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 62 (opexp)]
    MINUS     [reduce using rule 62 (opexp)]
    TIMES     [reduce using rule 62 (opexp)]
    DIVIDE    [reduce using rule 62 (opexp)]
    EQ        [reduce using rule 62 (opexp)]
    NEQ       [reduce using rule 62 (opexp)]
    LT        [reduce using rule 62 (opexp)]
    LE        [reduce using rule 62 (opexp)]
    GT        [reduce using rule 62 (opexp)]
    GE        [reduce using rule 62 (opexp)]
    AND       [reduce using rule 62 (opexp)]
    OR        [reduce using rule 62 (opexp)]
    $default  reduce using rule 62 (opexp)


State 101

   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   63      | exp DIVIDE exp .
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 63 (opexp)]
    MINUS     [reduce using rule 63 (opexp)]
    TIMES     [reduce using rule 63 (opexp)]
    DIVIDE    [reduce using rule 63 (opexp)]
    EQ        [reduce using rule 63 (opexp)]
    NEQ       [reduce using rule 63 (opexp)]
    LT        [reduce using rule 63 (opexp)]
    LE        [reduce using rule 63 (opexp)]
    GT        [reduce using rule 63 (opexp)]
    GE        [reduce using rule 63 (opexp)]
    AND       [reduce using rule 63 (opexp)]
    OR        [reduce using rule 63 (opexp)]
    $default  reduce using rule 63 (opexp)


State 102

   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   64      | exp EQ exp .
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 64 (cpexp)]
    MINUS     [reduce using rule 64 (cpexp)]
    TIMES     [reduce using rule 64 (cpexp)]
    DIVIDE    [reduce using rule 64 (cpexp)]
    EQ        [reduce using rule 64 (cpexp)]
    NEQ       [reduce using rule 64 (cpexp)]
    LT        [reduce using rule 64 (cpexp)]
    LE        [reduce using rule 64 (cpexp)]
    GT        [reduce using rule 64 (cpexp)]
    GE        [reduce using rule 64 (cpexp)]
    AND       [reduce using rule 64 (cpexp)]
    OR        [reduce using rule 64 (cpexp)]
    $default  reduce using rule 64 (cpexp)


State 103

   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   65      | exp NEQ exp .
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 65 (cpexp)]
    MINUS     [reduce using rule 65 (cpexp)]
    TIMES     [reduce using rule 65 (cpexp)]
    DIVIDE    [reduce using rule 65 (cpexp)]
    EQ        [reduce using rule 65 (cpexp)]
    NEQ       [reduce using rule 65 (cpexp)]
    LT        [reduce using rule 65 (cpexp)]
    LE        [reduce using rule 65 (cpexp)]
    GT        [reduce using rule 65 (cpexp)]
    GE        [reduce using rule 65 (cpexp)]
    AND       [reduce using rule 65 (cpexp)]
    OR        [reduce using rule 65 (cpexp)]
    $default  reduce using rule 65 (cpexp)


State 104

   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   67      | exp LT exp .
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 67 (cpexp)]
    MINUS     [reduce using rule 67 (cpexp)]
    TIMES     [reduce using rule 67 (cpexp)]
    DIVIDE    [reduce using rule 67 (cpexp)]
    EQ        [reduce using rule 67 (cpexp)]
    NEQ       [reduce using rule 67 (cpexp)]
    LT        [reduce using rule 67 (cpexp)]
    LE        [reduce using rule 67 (cpexp)]
    GT        [reduce using rule 67 (cpexp)]
    GE        [reduce using rule 67 (cpexp)]
    AND       [reduce using rule 67 (cpexp)]
    OR        [reduce using rule 67 (cpexp)]
    $default  reduce using rule 67 (cpexp)


State 105

   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   69      | exp LE exp .
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 69 (cpexp)]
    MINUS     [reduce using rule 69 (cpexp)]
    TIMES     [reduce using rule 69 (cpexp)]
    DIVIDE    [reduce using rule 69 (cpexp)]
    EQ        [reduce using rule 69 (cpexp)]
    NEQ       [reduce using rule 69 (cpexp)]
    LT        [reduce using rule 69 (cpexp)]
    LE        [reduce using rule 69 (cpexp)]
    GT        [reduce using rule 69 (cpexp)]
    GE        [reduce using rule 69 (cpexp)]
    AND       [reduce using rule 69 (cpexp)]
    OR        [reduce using rule 69 (cpexp)]
    $default  reduce using rule 69 (cpexp)


State 106

   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   66      | exp GT exp .
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 66 (cpexp)]
    MINUS     [reduce using rule 66 (cpexp)]
    TIMES     [reduce using rule 66 (cpexp)]
    DIVIDE    [reduce using rule 66 (cpexp)]
    EQ        [reduce using rule 66 (cpexp)]
    NEQ       [reduce using rule 66 (cpexp)]
    LT        [reduce using rule 66 (cpexp)]
    LE        [reduce using rule 66 (cpexp)]
    GT        [reduce using rule 66 (cpexp)]
    GE        [reduce using rule 66 (cpexp)]
    AND       [reduce using rule 66 (cpexp)]
    OR        [reduce using rule 66 (cpexp)]
    $default  reduce using rule 66 (cpexp)


State 107

   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   68      | exp GE exp .
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 68 (cpexp)]
    MINUS     [reduce using rule 68 (cpexp)]
    TIMES     [reduce using rule 68 (cpexp)]
    DIVIDE    [reduce using rule 68 (cpexp)]
    EQ        [reduce using rule 68 (cpexp)]
    NEQ       [reduce using rule 68 (cpexp)]
    LT        [reduce using rule 68 (cpexp)]
    LE        [reduce using rule 68 (cpexp)]
    GT        [reduce using rule 68 (cpexp)]
    GE        [reduce using rule 68 (cpexp)]
    AND       [reduce using rule 68 (cpexp)]
    OR        [reduce using rule 68 (cpexp)]
    $default  reduce using rule 68 (cpexp)


State 108

   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp
   77        | exp AND exp .

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 77 (boolexp)]
    MINUS     [reduce using rule 77 (boolexp)]
    TIMES     [reduce using rule 77 (boolexp)]
    DIVIDE    [reduce using rule 77 (boolexp)]
    EQ        [reduce using rule 77 (boolexp)]
    NEQ       [reduce using rule 77 (boolexp)]
    LT        [reduce using rule 77 (boolexp)]
    LE        [reduce using rule 77 (boolexp)]
    GT        [reduce using rule 77 (boolexp)]
    GE        [reduce using rule 77 (boolexp)]
    AND       [reduce using rule 77 (boolexp)]
    OR        [reduce using rule 77 (boolexp)]
    $default  reduce using rule 77 (boolexp)


State 109

   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   76        | exp OR exp .
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 76 (boolexp)]
    MINUS     [reduce using rule 76 (boolexp)]
    TIMES     [reduce using rule 76 (boolexp)]
    DIVIDE    [reduce using rule 76 (boolexp)]
    EQ        [reduce using rule 76 (boolexp)]
    NEQ       [reduce using rule 76 (boolexp)]
    LT        [reduce using rule 76 (boolexp)]
    LE        [reduce using rule 76 (boolexp)]
    GT        [reduce using rule 76 (boolexp)]
    GE        [reduce using rule 76 (boolexp)]
    AND       [reduce using rule 76 (boolexp)]
    OR        [reduce using rule 76 (boolexp)]
    $default  reduce using rule 76 (boolexp)


State 110

   44 arrayind: lvalue LBRACK exp . RBRACK
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    RBRACK  shift, and go to state 130
    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65


State 111

   42 lvalue: lvalue DOT ID .

    $default  reduce using rule 42 (lvalue)


State 112

   56 assign: lvalue ASSIGN exp .
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 56 (assign)]
    MINUS     [reduce using rule 56 (assign)]
    TIMES     [reduce using rule 56 (assign)]
    DIVIDE    [reduce using rule 56 (assign)]
    EQ        [reduce using rule 56 (assign)]
    NEQ       [reduce using rule 56 (assign)]
    LT        [reduce using rule 56 (assign)]
    LE        [reduce using rule 56 (assign)]
    GT        [reduce using rule 56 (assign)]
    GE        [reduce using rule 56 (assign)]
    AND       [reduce using rule 56 (assign)]
    OR        [reduce using rule 56 (assign)]
    $default  reduce using rule 56 (assign)


State 113

   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp
   81 createarray: arrayind OF exp .

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 81 (createarray)]
    MINUS     [reduce using rule 81 (createarray)]
    TIMES     [reduce using rule 81 (createarray)]
    DIVIDE    [reduce using rule 81 (createarray)]
    EQ        [reduce using rule 81 (createarray)]
    NEQ       [reduce using rule 81 (createarray)]
    LT        [reduce using rule 81 (createarray)]
    LE        [reduce using rule 81 (createarray)]
    GT        [reduce using rule 81 (createarray)]
    GE        [reduce using rule 81 (createarray)]
    AND       [reduce using rule 81 (createarray)]
    OR        [reduce using rule 81 (createarray)]
    $default  reduce using rule 81 (createarray)


State 114

   51 explist: exp COMMA . explist

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 71
    lvalue       go to state 14
    arrayind     go to state 15
    explist      go to state 131
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 115

   53 funcall: ID LPAREN explist RPAREN .

    $default  reduce using rule 53 (funcall)


State 116

   79 assignseq: assign COMMA . assignseq

    ID  shift, and go to state 73

    lvalue     go to state 74
    arrayind   go to state 75
    assign     go to state 76
    assignseq  go to state 132


State 117

   80 record: ID LBRACE assignseq RBRACE .

    $default  reduce using rule 80 (record)


State 118

   48 expseq: exp .
   49       | exp . COMMA expseq
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    COMMA   shift, and go to state 84
    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    $default  reduce using rule 48 (expseq)


State 119

   49 expseq: exp COMMA expseq .

    $default  reduce using rule 49 (expseq)


State 120

   45 stm: exp SEMICOLON exp .
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    $default  reduce using rule 45 (stm)


State 121

   46 stm: stm SEMICOLON exp .
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    $default  reduce using rule 46 (stm)


State 122

   54 ifthen: IF exp THEN exp .
   55 ifthenelse: IF exp THEN exp . ELSE exp
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65
    ELSE    shift, and go to state 133

    PLUS      [reduce using rule 54 (ifthen)]
    MINUS     [reduce using rule 54 (ifthen)]
    TIMES     [reduce using rule 54 (ifthen)]
    DIVIDE    [reduce using rule 54 (ifthen)]
    EQ        [reduce using rule 54 (ifthen)]
    NEQ       [reduce using rule 54 (ifthen)]
    LT        [reduce using rule 54 (ifthen)]
    LE        [reduce using rule 54 (ifthen)]
    GT        [reduce using rule 54 (ifthen)]
    GE        [reduce using rule 54 (ifthen)]
    AND       [reduce using rule 54 (ifthen)]
    OR        [reduce using rule 54 (ifthen)]
    ELSE      [reduce using rule 54 (ifthen)]
    $default  reduce using rule 54 (ifthen)


State 123

   57 while: WHILE exp DO exp .
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 57 (while)]
    MINUS     [reduce using rule 57 (while)]
    TIMES     [reduce using rule 57 (while)]
    DIVIDE    [reduce using rule 57 (while)]
    EQ        [reduce using rule 57 (while)]
    NEQ       [reduce using rule 57 (while)]
    LT        [reduce using rule 57 (while)]
    LE        [reduce using rule 57 (while)]
    GT        [reduce using rule 57 (while)]
    GE        [reduce using rule 57 (while)]
    AND       [reduce using rule 57 (while)]
    OR        [reduce using rule 57 (while)]
    $default  reduce using rule 57 (while)


State 124

   58 for: FOR ID ASSIGN exp . TO exp DO exp
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65
    TO      shift, and go to state 134


State 125

   39 fundec: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   40       | FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp

    ID     shift, and go to state 135
    COMMA  shift, and go to state 136

    $default  reduce using rule 34 (tyfields)

    tyfields  go to state 137


State 126

   38 vardec: VAR ID COLON . ID COLON ASSIGN exp

    ID  shift, and go to state 138


State 127

   37 vardec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 139
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 128

   30 tydec: TYPE ID EQ . ty

    ID      shift, and go to state 140
    LBRACE  shift, and go to state 141
    ARRAY   shift, and go to state 142

    ty  go to state 143


State 129

   59 let: LET decs IN expseq . END

    END  shift, and go to state 144


State 130

   44 arrayind: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 44 (arrayind)


State 131

   51 explist: exp COMMA explist .

    $default  reduce using rule 51 (explist)


State 132

   79 assignseq: assign COMMA assignseq .

    $default  reduce using rule 79 (assignseq)


State 133

   55 ifthenelse: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 145
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 134

   58 for: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 146
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 135

   35 tyfields: ID . COLON ID

    COLON  shift, and go to state 147


State 136

   36 tyfields: COMMA . tyfields

    ID     shift, and go to state 135
    COMMA  shift, and go to state 136

    $default  reduce using rule 34 (tyfields)

    tyfields  go to state 148


State 137

   39 fundec: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   40       | FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 149


State 138

   38 vardec: VAR ID COLON ID . COLON ASSIGN exp

    COLON  shift, and go to state 150


State 139

   37 vardec: VAR ID ASSIGN exp .
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    $default  reduce using rule 37 (vardec)


State 140

   31 ty: ID .

    $default  reduce using rule 31 (ty)


State 141

   32 ty: LBRACE . tyfields RBRACE

    ID     shift, and go to state 135
    COMMA  shift, and go to state 136

    $default  reduce using rule 34 (tyfields)

    tyfields  go to state 151


State 142

   33 ty: ARRAY . OF ID

    OF  shift, and go to state 152


State 143

   30 tydec: TYPE ID EQ ty .

    $default  reduce using rule 30 (tydec)


State 144

   59 let: LET decs IN expseq END .

    $default  reduce using rule 59 (let)


State 145

   55 ifthenelse: IF exp THEN exp ELSE exp .
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 55 (ifthenelse)]
    MINUS     [reduce using rule 55 (ifthenelse)]
    TIMES     [reduce using rule 55 (ifthenelse)]
    DIVIDE    [reduce using rule 55 (ifthenelse)]
    EQ        [reduce using rule 55 (ifthenelse)]
    NEQ       [reduce using rule 55 (ifthenelse)]
    LT        [reduce using rule 55 (ifthenelse)]
    LE        [reduce using rule 55 (ifthenelse)]
    GT        [reduce using rule 55 (ifthenelse)]
    GE        [reduce using rule 55 (ifthenelse)]
    AND       [reduce using rule 55 (ifthenelse)]
    OR        [reduce using rule 55 (ifthenelse)]
    $default  reduce using rule 55 (ifthenelse)


State 146

   58 for: FOR ID ASSIGN exp TO exp . DO exp
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65
    DO      shift, and go to state 153


State 147

   35 tyfields: ID COLON . ID

    ID  shift, and go to state 154


State 148

   36 tyfields: COMMA tyfields .

    $default  reduce using rule 36 (tyfields)


State 149

   39 fundec: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   40       | FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 155
    EQ     shift, and go to state 156


State 150

   38 vardec: VAR ID COLON ID COLON . ASSIGN exp

    ASSIGN  shift, and go to state 157


State 151

   32 ty: LBRACE tyfields . RBRACE

    RBRACE  shift, and go to state 158


State 152

   33 ty: ARRAY OF . ID

    ID  shift, and go to state 159


State 153

   58 for: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 160
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 154

   35 tyfields: ID COLON ID .

    $default  reduce using rule 35 (tyfields)


State 155

   40 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 161


State 156

   39 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 162
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 157

   38 vardec: VAR ID COLON ID COLON ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 163
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 158

   32 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 32 (ty)


State 159

   33 ty: ARRAY OF ID .

    $default  reduce using rule 33 (ty)


State 160

   58 for: FOR ID ASSIGN exp TO exp DO exp .
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    PLUS      [reduce using rule 58 (for)]
    MINUS     [reduce using rule 58 (for)]
    TIMES     [reduce using rule 58 (for)]
    DIVIDE    [reduce using rule 58 (for)]
    EQ        [reduce using rule 58 (for)]
    NEQ       [reduce using rule 58 (for)]
    LT        [reduce using rule 58 (for)]
    LE        [reduce using rule 58 (for)]
    GT        [reduce using rule 58 (for)]
    GE        [reduce using rule 58 (for)]
    AND       [reduce using rule 58 (for)]
    OR        [reduce using rule 58 (for)]
    $default  reduce using rule 58 (for)


State 161

   40 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 164


State 162

   39 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp .
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    $default  reduce using rule 39 (fundec)


State 163

   38 vardec: VAR ID COLON ID COLON ASSIGN exp .
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    $default  reduce using rule 38 (vardec)


State 164

   40 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp          go to state 165
    lvalue       go to state 14
    arrayind     go to state 15
    funcall      go to state 16
    ifthen       go to state 17
    ifthenelse   go to state 18
    assign       go to state 19
    while        go to state 20
    for          go to state 21
    let          go to state 22
    opexp        go to state 23
    cpexp        go to state 24
    cpstr        go to state 25
    boolexp      go to state 26
    record       go to state 27
    createarray  go to state 28


State 165

   40 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .
   60 opexp: exp . PLUS exp
   61      | exp . MINUS exp
   62      | exp . TIMES exp
   63      | exp . DIVIDE exp
   64 cpexp: exp . EQ exp
   65      | exp . NEQ exp
   66      | exp . GT exp
   67      | exp . LT exp
   68      | exp . GE exp
   69      | exp . LE exp
   76 boolexp: exp . OR exp
   77        | exp . AND exp

    PLUS    shift, and go to state 54
    MINUS   shift, and go to state 55
    TIMES   shift, and go to state 56
    DIVIDE  shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65

    $default  reduce using rule 40 (fundec)
